spring.application.name=ApiGateway
server.port=8082
eureka.client.serviceUrl.defaultZone=http://localhost:8010/eureka


spring.cloud.gateway.routes[0].id = photoappapiuser
spring.cloud.gateway.routes[0].uri = lb://photoappapiuser
spring.cloud.gateway.routes[0].predicates[0]=Path=/photoappapiuser/users/status/check
spring.cloud.gateway.routes[0].predicates[1]=Method=GET
# Below property is to check whether the request contains header with key Authorization and value is "Bearer {some key}".
spring.cloud.gateway.routes[0].predicates[2]=Header=Authorization, Bearer (.*)
# Below property is used to not accept the incoming cookie header.
spring.cloud.gateway.routes[0].filters[0]=RemoveRequestHeader=Cookie
# In the below property /$\{segment} will be our incoming path uri from postman.
spring.cloud.gateway.routes[0].filters[1]=RewritePath=/photoappapiuser/(?<segment>.*), /$\{segment}
# In the below property we added another filter to the path. And this custom filter class is defined in security package.
spring.cloud.gateway.routes[0].filters[2]=AuthorizationHeaderFilter


spring.cloud.gateway.routes[1].id = photoappapiuser
spring.cloud.gateway.routes[1].uri = lb://photoappapiuser
spring.cloud.gateway.routes[1].predicates[0]=Path=/photoappapiuser/users
spring.cloud.gateway.routes[1].predicates[1]=Method=POST
spring.cloud.gateway.routes[1].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[1].filters[1]=RewritePath=/photoappapiuser/(?<segment>.*), /$\{segment}

spring.cloud.gateway.routes[2].id = photoappapiuser-login
spring.cloud.gateway.routes[2].uri = lb://photoappapiuser
# Below property is the path given by spring security for login.
# For this we don't have to create separate controller class and method to handle this HTTP request
# spring.cloud.gateway.routes[2].predicates[0]=Path=/photoappapiuser/users/login
# Here in the below statement we created the custom path for logging in and added some code in photoappapiuser's WebSecurity class.
spring.cloud.gateway.routes[2].predicates[0]=Path=/photoappapiuser/users/login
spring.cloud.gateway.routes[2].predicates[1]=Method=POST
spring.cloud.gateway.routes[2].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[2].filters[1]=RewritePath=/photoappapiuser/(?<segment>.*), /$\{segment}

spring.cloud.gateway.routes[3].id = photoappapiuser-get-update-delete
spring.cloud.gateway.routes[3].uri = lb://photoappapiuser
spring.cloud.gateway.routes[3].predicates[0]=Path=/photoappapiuser/users/**
spring.cloud.gateway.routes[3].predicates[1]=Method=GET,PUT,DELETE
spring.cloud.gateway.routes[3].predicates[2]=Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[3].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[3].filters[1]=RewritePath=/photoappapiuser/(?<segment>.*), /$\{segment}
spring.cloud.gateway.routes[3].filters[2]=AuthorizationHeaderFilter



# look in the main class for clear explanation of the below statement
# below properties are used to automatically map the api gateway routes instead of mapping the routes like above
# we can use both the methods
# manual routing -> by setting all the properties like above
# Automatic routing -> by making api-gateway route our apis

#spring.cloud.gateway.discovery.locator.enabled=true
#spring.cloud.gateway.discovery.locator.lower-case-service-id=true